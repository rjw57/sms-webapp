# We require "sudo" since we're running a docker container.
# See: https://docs.travis-ci.com/user/docker/
sudo: required
services:
  - docker

language: python

# We run tox et al inside a container so this does not necessarily have to match
# the version of Python we're using but it is neater if it does.
python:
  - "3.6"

install:
  - pip install codecov

env:
  global:
    # Set the required secrets for production to mock values here. Although they
    # are not real values, the production image will no start without them set
    # to some value even if the precise value does not affect the outcome of
    # calling the health-check endpoint.
    JWPLATFORM_API_KEY: 'api-key-mock'
    JWPLATFORM_API_SECRET: 'api-key-secret'
    JWPLATFORM_EMBED_PLAYER_KEY: 'embed-player-key'

script:
  # Run tox tests
  - ./compose.sh tox
      run
      -v $PWD:/tmp/workspace
      -e COVERAGE_FILE=/tmp/workspace/.coverage
      -e TOXINI_ARTEFACT_DIR=/tmp/workspace/build
      --rm
      tox
  - ./compose.sh tox down

  # Check that the production container builds and listens on port 8000
  - ./compose.sh production up -d
  - ./compose/wait-for-it.sh localhost:8000 -t 15
  - ./compose.sh production exec production_app ./manage.py migrate

  # The health-check endpoint should return a non-fail status.
  - curl --location --output /tmp/healthz --fail --silent --connect-timeout 2
      http://localhost:8000/healthz

after_success:
  # Upload to codecov
  - codecov

# From: https://docs.travis-ci.com/user/deployment/pages/
deploy:
    provider: pages
    skip_cleanup: true
    github_token: $GITHUB_TOKEN
    local_dir: build/doc/
    email: automation@uis.cam.ac.uk
    name: Automation Bot
    on:
      branch: master
